import os
import pathlib

import requests
from flask import Flask, session, abort, redirect, request, render_template, url_for, send_file
from google.oauth2 import id_token
from google_auth_oauthlib.flow import Flow
from pip._vendor import cachecontrol
import google.auth.transport.requests
import mysql.connector
import psycopg2

from functools import wraps

from coolname import generate_slug
import pandas as pd

app = Flask("Quiz App")
app.secret_key = "Quizzy"


# PostgreSQL local connection
con = psycopg2.connect(
  host="localhost",
  user="postgres",
  password="root",
  database="quizzy"
)

# # Postgres For Heroku
# con = psycopg2.connect(
#     host="ec2-3-225-213-67.compute-1.amazonaws.com",
#     database="d8ouraiosoe3eh",
#     user="nbpkzywlljycen",
#     password="d2d09692902b440dc8f127b45bead93c26b50513c6a4388ebc98d0dc472417f4")

cursor = con.cursor()

# Tables creation

cursor.execute("create table if not exists users (UserID int generated by default as identity not null, Name varchar(50) not null, Email varchar(100) not null, primary key (UserID));")
con.commit()

cursor.execute("CREATE TABLE IF NOT EXISTS QUIZ(quiz_id varchar(100) NOT NULL, quiz_name varchar(100) NOT NULL, total_marks int, created_by int, primary key (quiz_id), CONSTRAINT creates FOREIGN KEY (created_by) REFERENCES USERS(userid) ON DELETE CASCADE ON UPDATE CASCADE);")
con.commit()

cursor.execute("CREATE TABLE IF NOT EXISTS QUESTIONS (quiz_id varchar(100) NOT NULL, q_desc varchar(10000) NOT NULL, option_one varchar(100) NOT NULL, option_two varchar(100) NOT NULL, option_three varchar(100) NOT NULL, option_four varchar(100) NOT NULL, correct_option varchar(100) NOT NULL, q_marks int NOT NULL, CONSTRAINT fk_questions FOREIGN KEY (quiz_id) REFERENCES QUIZ(quiz_id) ON DELETE CASCADE ON UPDATE CASCADE);")
con.commit()

cursor.execute("create table if not exists ATTEMPTS(userid int not null, Name varchar(50) not null, quiz_id varchar(100) not null, marks_scored int not null, total_marks int not null, CONSTRAINT id_user FOREIGN KEY (userid) REFERENCES USERS(userid) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT id_quiz FOREIGN KEY (quiz_id) REFERENCES QUIZ(quiz_id) ON DELETE CASCADE ON UPDATE CASCADE);")
con.commit()

os.environ["OAUTHLIB_INSECURE_TRANSPORT"] = "1"

GOOGLE_CLIENT_ID = "80687604948-vvo4h9b9ocbk3aso2o1fg5qil9hm2ept.apps.googleusercontent.com"
client_secrets_file = os.path.join(pathlib.Path(__file__).parent, "client_secret.json")

flow = Flow.from_client_secrets_file(
    client_secrets_file=client_secrets_file,
    scopes=["https://www.googleapis.com/auth/userinfo.profile", "https://www.googleapis.com/auth/userinfo.email", "openid"],
    redirect_uri="http://127.0.0.1:5000/callback"
    # redirect_uri="https://try-heroku-prachi.herokuapp.com/callback"
)


def login_is_required(f):
	@wraps(f)
	def wrap(*args, **kwargs):
		if 'loggedin' in session:
			return f(*args, **kwargs)
		else:
			return abort(401)
	return wrap


@app.route("/login")
def login():
    authorization_url, state = flow.authorization_url()
    session["state"] = state
    return redirect(authorization_url)


@app.route("/callback")
def callback():
    flow.fetch_token(authorization_response=request.url)

    if not session["state"] == request.args["state"]:
        abort(500)  # State does not match!

    credentials = flow.credentials
    request_session = requests.session()
    cached_session = cachecontrol.CacheControl(request_session)
    token_request = google.auth.transport.requests.Request(session=cached_session)

    id_info = id_token.verify_oauth2_token(
        id_token=credentials._id_token,
        request=token_request,
        audience=GOOGLE_CLIENT_ID
    )


    # cursor.execute("CREATE DATABASE IF NOT EXISTS quizzy;")
    # cursor.execute("USE quizzy;")
    
    cursor.execute("SELECT * FROM users WHERE (Email = %s AND Name = %s);", (id_info.get("email"), id_info.get("name"), ))
    account = cursor.fetchone()

    if not account:
        cursor.execute("INSERT INTO users (Name, Email) VALUES (%s, %s);", (id_info.get("name"), id_info.get("email")))
        con.commit()

    session['loggedin'] = True
    session["google_id"] = id_info.get("sub")
    session["name"] = id_info.get("name")
    session["email"] = id_info.get("email")


    return redirect("/landing_page")


@app.route("/logout")
def logout():
    session.clear()
    return redirect("/")


@app.route("/")
def index():
    return render_template("login.jinja")


@app.route("/landing_page")
@login_is_required
def landing_page():
    return render_template("landing_page.jinja", name = session['name'])

# Upload folder
UPLOAD_FOLDER = 'static/files'
app.config['UPLOAD_FOLDER'] =  UPLOAD_FOLDER


def parseCSV(filePath, quiz_id):

    # CSV Column Names
    col_names = ['q_desc','option_one','option_two', 'option_three', 'option_four' , 'correct_option', 'q_marks']
    
    # Use Pandas to parse the CSV file
    csvData = pd.read_csv(filePath,names=col_names, header=None, encoding= 'unicode_escape')


    # Loop through the Rows
    total_marks = 0
    for i,row in csvData.iterrows():
        if i==0:
            continue
        total_marks += int(row['q_marks'])
        sql = "INSERT INTO questions (quiz_id, q_desc, option_one, option_two, option_three, option_four, correct_option, q_marks) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)"
        value = (quiz_id, row['q_desc'],row['option_one'],row['option_two'],row['option_three'],row['option_four'],row['correct_option'], row['q_marks'])
        cursor.execute(sql, value)
        con.commit()

    cursor.execute("UPDATE QUIZ SET total_marks = %s where (quiz_id = %s);", (total_marks, quiz_id))
    con.commit()

    # Delete the file after we've processed the data
    os.remove(filePath)

@app.route("/landing_page/create_quiz")
@login_is_required
def create_quiz():
    return render_template('create_quiz.jinja')

# Get the uploaded files
@app.route("/landing_page/create_quiz", methods=['POST'])
def createQuiz():
    
    # create unique quiz details
    quiz_id = generate_slug(2)
    quiz_name = request.form.get('q_name')
    
    # Add to database
    cursor.execute("SELECT userid from USERS where (email = %s)",(session["email"],))
    u_id = cursor.fetchone()        # returns tuple

    
    # enter quiz details into the db
    cursor.execute("INSERT INTO QUIZ(quiz_id, quiz_name, created_by) VALUES (%s, %s, %s);", (quiz_id, quiz_name, u_id[0]))
    con.commit()
    
    # get the uploaded file
    uploaded_file = request.files['file']
    
    if uploaded_file.filename != '':
        # set the file path
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], uploaded_file.filename)
        
        # save the file
        uploaded_file.save(file_path)
         
        parseCSV(file_path, quiz_id)
      
    return "<p>Your quiz {:s} is created and unique test ID is {:s}</p>".format(quiz_name, quiz_id)

@app.route('/download')
def download_file():
	return send_file("static/files/Quiz_Template.csv", as_attachment=True)    

entered_answers = []

@app.route("/landing_page/take_quiz", methods=['GET','POST'])
@login_is_required
def take_quiz():
    global entered_answers
    if request.method == 'POST':
        received_id  = request.form.get('q_id')
        return redirect(url_for('new_route', received_id=received_id))

    return render_template('take_quiz.jinja')

@app.route('/landing_page/take_quiz/<string:received_id>', methods=['GET','POST'])
def new_route(received_id):
      
    cursor.execute("SELECT * from QUESTIONS where (quiz_id = %s)",(received_id,))

    rows = cursor.fetchall()

    if request.method == 'POST':
        for i in range(len(rows)):
            answer = request.form.get(str(i))
            entered_answers.append(answer)
        return redirect(url_for('view_score', received_id=received_id))

    return render_template('questions.jinja', rows = rows, length = len(rows), test_id = received_id)

@app.route('/viewscore/<string:received_id>', methods=['GET','POST'])
def view_score(received_id):
    
    cursor.execute("SELECT correct_option from QUESTIONS where (quiz_id = %s)",(received_id,))
    answers = cursor.fetchall()

    cursor.execute("SELECT q_marks from QUESTIONS where (quiz_id = %s)",(received_id,))
    marks = cursor.fetchall()      

    cursor.execute("SELECT total_marks from QUIZ where (quiz_id = %s)",(received_id,))
    total_marks = cursor.fetchone()    
      
    score = 0
    for i in range(len(answers)):
        if answers[i][0] == entered_answers[i]:
            score += marks[i][0]


    cursor.execute("SELECT userid from USERS where (email = %s)",(session["email"],))
    u_id = cursor.fetchone()        # returns tuple

    
    cursor.execute("INSERT INTO ATTEMPTS VALUES (%s, %s, %s, %s, %s);", (u_id[0], session["name"], received_id, score, total_marks))
    con.commit()
    
    return "Your score is: {:d}/{:d}".format(score, total_marks[0])


@app.route("/landing_page/performance", methods=['GET','POST'])
@login_is_required
def performance():
    if request.method == 'POST':
        received_id  = request.form.get('q_id')
        # print(received_id)
        return redirect(url_for('show_performance', received_id=received_id))

    return render_template('view_perf.jinja')

@app.route('/landing_page/performance/<string:received_id>', methods=['GET','POST'])
def show_performance(received_id):
      
    cursor.execute("SELECT * from ATTEMPTS where (quiz_id = %s)",(received_id,))
    rows = cursor.fetchall()

    cursor.execute("SELECT email from users where (userid = (SELECT created_by from QUIZ where (quiz_id = %s)))",(received_id,))
    creator_email = cursor.fetchone()
    # print(creator)

    # check if the creator of the quiz is requesting scores
    if creator_email[0] == session["email"]:
        if len(rows)>0:
            return render_template("perf_display.html", rows = rows, test_id = received_id)
        else:
            return "No user has currently attempted this quiz"
    else:
        return "You are not the creator of this quiz"



if __name__ == "__main__":
    app.run(debug=True)

